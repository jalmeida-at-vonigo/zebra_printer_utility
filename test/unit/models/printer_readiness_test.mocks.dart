// Mocks generated by Mockito 5.4.6 from annotations
// in zebrautil/test/unit/models/printer_readiness_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:flutter/services.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;
import 'package:zebrautil/internal/communication_policy.dart' as _i7;
import 'package:zebrautil/models/result.dart' as _i4;
import 'package:zebrautil/zebra_printer.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeZebraController_0 extends _i1.SmartFake
    implements _i2.ZebraController {
  _FakeZebraController_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMethodChannel_1 extends _i1.SmartFake implements _i3.MethodChannel {
  _FakeMethodChannel_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeResult_2<T> extends _i1.SmartFake implements _i4.Result<T> {
  _FakeResult_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ZebraPrinter].
///
/// See the documentation for Mockito's code generation for more information.
class MockZebraPrinter extends _i1.Mock implements _i2.ZebraPrinter {
  MockZebraPrinter() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get instanceId => (super.noSuchMethod(
        Invocation.getter(#instanceId),
        returnValue: _i5.dummyValue<String>(
          this,
          Invocation.getter(#instanceId),
        ),
      ) as String);

  @override
  _i2.ZebraController get controller => (super.noSuchMethod(
        Invocation.getter(#controller),
        returnValue: _FakeZebraController_0(
          this,
          Invocation.getter(#controller),
        ),
      ) as _i2.ZebraController);

  @override
  bool get isRotated => (super.noSuchMethod(
        Invocation.getter(#isRotated),
        returnValue: false,
      ) as bool);

  @override
  bool get isScanning => (super.noSuchMethod(
        Invocation.getter(#isScanning),
        returnValue: false,
      ) as bool);

  @override
  bool get shouldSync => (super.noSuchMethod(
        Invocation.getter(#shouldSync),
        returnValue: false,
      ) as bool);

  @override
  _i3.MethodChannel get channel => (super.noSuchMethod(
        Invocation.getter(#channel),
        returnValue: _FakeMethodChannel_1(
          this,
          Invocation.getter(#channel),
        ),
      ) as _i3.MethodChannel);

  @override
  set isRotated(bool? _isRotated) => super.noSuchMethod(
        Invocation.setter(
          #isRotated,
          _isRotated,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set isScanning(bool? _isScanning) => super.noSuchMethod(
        Invocation.setter(
          #isScanning,
          _isScanning,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set shouldSync(bool? _shouldSync) => super.noSuchMethod(
        Invocation.setter(
          #shouldSync,
          _shouldSync,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set onDiscoveryError(
          dynamic Function(
            String,
            String?,
          )? _onDiscoveryError) =>
      super.noSuchMethod(
        Invocation.setter(
          #onDiscoveryError,
          _onDiscoveryError,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set onPermissionDenied(dynamic Function()? _onPermissionDenied) =>
      super.noSuchMethod(
        Invocation.setter(
          #onPermissionDenied,
          _onPermissionDenied,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set channel(_i3.MethodChannel? _channel) => super.noSuchMethod(
        Invocation.setter(
          #channel,
          _channel,
        ),
        returnValueForMissingStub: null,
      );

  @override
  void startScanning() => super.noSuchMethod(
        Invocation.method(
          #startScanning,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void stopScanning() => super.noSuchMethod(
        Invocation.method(
          #stopScanning,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<_i4.Result<void>> connectToPrinter(String? address) =>
      (super.noSuchMethod(
        Invocation.method(
          #connectToPrinter,
          [address],
        ),
        returnValue: _i6.Future<_i4.Result<void>>.value(_FakeResult_2<void>(
          this,
          Invocation.method(
            #connectToPrinter,
            [address],
          ),
        )),
      ) as _i6.Future<_i4.Result<void>>);

  @override
  _i6.Future<_i4.Result<void>> disconnect() => (super.noSuchMethod(
        Invocation.method(
          #disconnect,
          [],
        ),
        returnValue: _i6.Future<_i4.Result<void>>.value(_FakeResult_2<void>(
          this,
          Invocation.method(
            #disconnect,
            [],
          ),
        )),
      ) as _i6.Future<_i4.Result<void>>);

  @override
  _i6.Future<_i4.Result<void>> print({required String? data}) =>
      (super.noSuchMethod(
        Invocation.method(
          #print,
          [],
          {#data: data},
        ),
        returnValue: _i6.Future<_i4.Result<void>>.value(_FakeResult_2<void>(
          this,
          Invocation.method(
            #print,
            [],
            {#data: data},
          ),
        )),
      ) as _i6.Future<_i4.Result<void>>);

  @override
  _i6.Future<_i4.Result<Map<String, dynamic>>> getPrinterStatus() =>
      (super.noSuchMethod(
        Invocation.method(
          #getPrinterStatus,
          [],
        ),
        returnValue: _i6.Future<_i4.Result<Map<String, dynamic>>>.value(
            _FakeResult_2<Map<String, dynamic>>(
          this,
          Invocation.method(
            #getPrinterStatus,
            [],
          ),
        )),
      ) as _i6.Future<_i4.Result<Map<String, dynamic>>>);

  @override
  _i6.Future<String?> getSetting(String? setting) => (super.noSuchMethod(
        Invocation.method(
          #getSetting,
          [setting],
        ),
        returnValue: _i6.Future<String?>.value(),
      ) as _i6.Future<String?>);

  @override
  _i6.Future<_i4.Result<void>> setSetting(
    String? setting,
    String? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setSetting,
          [
            setting,
            value,
          ],
        ),
        returnValue: _i6.Future<_i4.Result<void>>.value(_FakeResult_2<void>(
          this,
          Invocation.method(
            #setSetting,
            [
              setting,
              value,
            ],
          ),
        )),
      ) as _i6.Future<_i4.Result<void>>);

  @override
  void rotate() => super.noSuchMethod(
        Invocation.method(
          #rotate,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<bool> isPrinterConnected() => (super.noSuchMethod(
        Invocation.method(
          #isPrinterConnected,
          [],
        ),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);

  @override
  _i6.Future<void> nativeMethodCallHandler(_i3.MethodCall? methodCall) =>
      (super.noSuchMethod(
        Invocation.method(
          #nativeMethodCallHandler,
          [methodCall],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [CommunicationPolicy].
///
/// See the documentation for Mockito's code generation for more information.
class MockCommunicationPolicy extends _i1.Mock
    implements _i7.CommunicationPolicy {
  MockCommunicationPolicy() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i4.Result<T>> execute<T>(
    _i6.Future<_i4.Result<T>> Function()? operation,
    String? operationName, {
    _i7.CommunicationPolicyOptions? options,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [
            operation,
            operationName,
          ],
          {#options: options},
        ),
        returnValue: _i6.Future<_i4.Result<T>>.value(_FakeResult_2<T>(
          this,
          Invocation.method(
            #execute,
            [
              operation,
              operationName,
            ],
            {#options: options},
          ),
        )),
      ) as _i6.Future<_i4.Result<T>>);

  @override
  _i6.Future<_i4.Result<bool>> getConnectionStatus() => (super.noSuchMethod(
        Invocation.method(
          #getConnectionStatus,
          [],
        ),
        returnValue: _i6.Future<_i4.Result<bool>>.value(_FakeResult_2<bool>(
          this,
          Invocation.method(
            #getConnectionStatus,
            [],
          ),
        )),
      ) as _i6.Future<_i4.Result<bool>>);

  @override
  void forceConnectionCheck() => super.noSuchMethod(
        Invocation.method(
          #forceConnectionCheck,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  Map<String, dynamic> getPolicyStats() => (super.noSuchMethod(
        Invocation.method(
          #getPolicyStats,
          [],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);
}
