// Mocks generated by Mockito 5.4.6 from annotations
// in zebrautil/test/unit/internal/operation_callback_handler_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:flutter/services.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:zebrautil/internal/operation_manager.dart' as _i4;
import 'package:zebrautil/models/operation_log_entry.dart' as _i5;
import 'package:zebrautil/models/result.dart' as _i3;
import 'package:zebrautil/zebra_printer_manager.dart' as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeMethodChannel_0 extends _i1.SmartFake implements _i2.MethodChannel {
  _FakeMethodChannel_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeResult_1<T1> extends _i1.SmartFake implements _i3.Result<T1> {
  _FakeResult_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [OperationManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockOperationManager extends _i1.Mock implements _i4.OperationManager {
  MockOperationManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.MethodChannel get channel => (super.noSuchMethod(
        Invocation.getter(#channel),
        returnValue: _FakeMethodChannel_0(
          this,
          Invocation.getter(#channel),
        ),
      ) as _i2.MethodChannel);

  @override
  List<_i5.OperationLogEntry> get operationLog => (super.noSuchMethod(
        Invocation.getter(#operationLog),
        returnValue: <_i5.OperationLogEntry>[],
      ) as List<_i5.OperationLogEntry>);

  @override
  int get activeOperationCount => (super.noSuchMethod(
        Invocation.getter(#activeOperationCount),
        returnValue: 0,
      ) as int);

  @override
  List<String> get activeOperationIds => (super.noSuchMethod(
        Invocation.getter(#activeOperationIds),
        returnValue: <String>[],
      ) as List<String>);

  @override
  void clearLog() => super.noSuchMethod(
        Invocation.method(
          #clearLog,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<_i3.Result<T>> execute<T>({
    required String? method,
    Map<String, dynamic>? arguments,
    Duration? timeout = const Duration(seconds: 30),
    _i7.CancellationToken? cancellationToken,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [],
          {
            #method: method,
            #arguments: arguments,
            #timeout: timeout,
            #cancellationToken: cancellationToken,
          },
        ),
        returnValue: _i6.Future<_i3.Result<T>>.value(_FakeResult_1<T>(
          this,
          Invocation.method(
            #execute,
            [],
            {
              #method: method,
              #arguments: arguments,
              #timeout: timeout,
              #cancellationToken: cancellationToken,
            },
          ),
        )),
      ) as _i6.Future<_i3.Result<T>>);

  @override
  void completeOperation(
    String? operationId,
    dynamic result,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #completeOperation,
          [
            operationId,
            result,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void failOperation(
    String? operationId,
    String? error,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #failOperation,
          [
            operationId,
            error,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void cancelAll() => super.noSuchMethod(
        Invocation.method(
          #cancelAll,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
