**See also:**
- [Error Handling Guide](mdc:.readme/guides/error-handling.md)
- [Development Docs](mdc:.readme/development/README.md)
- [README.md](mdc:README.md)
- [Zebra Error Bridge](mdc:.cursor/rules/zebra-error-bridge.mdc)

# RESULT-BASED ARCHITECTURE & ERROR CODE CENTRALIZATION

## Overview
The plugin uses a comprehensive Result-based architecture for consistent error and success handling across all operations. **ALL error and success codes MUST be defined in [result.dart](mdc:lib/models/result.dart) and referenced using the centralized constants.**

## Core Principles
**NO hardcoded error or success strings should exist anywhere in the codebase outside of [result.dart](mdc:lib/models/result.dart).**

**ALL ZSDK operation failures MUST use [ZebraErrorBridge](mdc:lib/internal/zebra_error_bridge.dart) instead of generic Result.error().**

## Core Components

### Result<T> Class
- **Purpose**: Wrapper for all operation results with success/failure state
- **Location**: [lib/models/result.dart](mdc:lib/models/result.dart)
- **Key Methods**:
  - `Result.success([T? data])` - Simple success result
  - `Result.successCode(SuccessCode, formatArgs: [...], data: ...)` - Success with structured info
  - `Result.errorCode(ErrorCode, formatArgs: [...], ...)` - Failure with structured error
  - `Result.failure(ErrorInfo)` - Direct error info
  - `Result.error(message, ...)` - Simple error with message

### ErrorCode & SuccessCode Classes
- **Purpose**: Structured constants with formatable message templates
- **Location**: [lib/models/result.dart](mdc:lib/models/result.dart)
- **Key Features**:
  - Categorized constants (Connection, Print, Discovery, etc.)
  - Formatable message templates using `{0}`, `{1}`, etc.
  - Comprehensive descriptions and categories
  - Utility methods for code lookup
  - **Zebra-specific error codes** for proper ZSDK error mapping

### ZebraErrorBridge Integration
- **Purpose**: Bridge pattern for converting ZSDK errors to Result objects
- **Location**: [lib/internal/zebra_error_bridge.dart](mdc:lib/internal/zebra_error_bridge.dart)
- **Usage**: ALL ZSDK operation failures must use this bridge instead of generic Result.error()
- **Benefits**: Proper error classification, rich context, no false positives

### ErrorInfo & SuccessInfo Classes
- **Purpose**: Detailed information about errors and successes
- **Features**:
  - Human-readable messages
  - Timestamps
  - Native error details (for errors)
  - Stack traces (for errors)
  - Serialization support

## Constants Organization

### ErrorCodes Class
All error constants are defined in `ErrorCodes` class:
```dart
class ErrorCodes {
  static const connectionError = ErrorCode(...);
  static const connectionTimeout = ErrorCode(...);
  static const connectionRetryFailed = ErrorCode(...);
  static const printError = ErrorCode(...);
  static const printTimeout = ErrorCode(...);
  static const printRetryFailed = ErrorCode(...);
  static const discoveryError = ErrorCode(...);
  static const noPrintersFound = ErrorCode(...);
  // ... see [result.dart](mdc:lib/models/result.dart)
}
```

### SuccessCodes Class
All success constants are defined in `SuccessCodes` class:
```dart
class SuccessCodes {
  static const connectionSuccess = SuccessCode(...);
  static const connectionRetrySuccess = SuccessCode(...);
  static const disconnectSuccess = SuccessCode(...);
  static const printSuccess = SuccessCode(...);
  static const printRetrySuccess = SuccessCode(...);
  static const printDataSent = SuccessCode(...);
  static const discoverySuccess = SuccessCode(...);
  static const discoveryTimeoutSuccess = SuccessCode(...);
  // ... see [result.dart](mdc:lib/models/result.dart)
}
```

## FormatArgs Usage Guidelines

- **NEVER pass a full error message as a format argument.**
- Only pass dynamic values (numbers, field names, etc.) as formatArgs.
- If a new error message template is needed, add a new ErrorCode constant in [result.dart](mdc:lib/models/result.dart).
- All error message templates must be defined in [result.dart](mdc:lib/models/result.dart), not in usage sites.

### ✅ CORRECT - Pass Only Variable Values
```dart
Result.errorCode(
  ErrorCodes.connectionRetryFailed,
  formatArgs: [_maxAttempts],
);
Result.errorCode(
  ErrorCodes.connectionTimeout,
  formatArgs: [timeoutSeconds],
);
Result.successCode(
  SuccessCodes.discoverySuccess,
  formatArgs: [printerCount],
);
// CORRECT for new error templates:
Result.errorCode(
  ErrorCodes.printDataTooLarge,
  formatArgs: [data.length],
);
```

### ❌ WRONG - Pass Entire Messages
```dart
Result.errorCode(
  ErrorCodes.connectionError,
  formatArgs: ['Failed to connect after $_maxAttempts attempts'],
);
Result.errorCode(
  ErrorCodes.printError,
  formatArgs: ['Print failed: $errorMessage'],
);
Result.errorCode(
  ErrorCodes.printDataError,
  formatArgs: ['Print data too large (${data.length} bytes)'],
);
```

### Message Template Examples
```dart
'Failed to connect after {0} attempts'  // Use: formatArgs: [attempts]
'Connection timed out after {0} seconds'  // Use: formatArgs: [seconds]
'Multiple printers found ({0}), specify device explicitly'  // Use: formatArgs: [count]
'Successfully connected to printer after {0} attempts'  // Use: formatArgs: [attempts]
'Successfully discovered {0} printers'  // Use: formatArgs: [count]
'Successfully sent {0} bytes of print data'  // Use: formatArgs: [bytes]
'Print data too large: {0} bytes' // Use: formatArgs: [data.length]
```

## Usage Patterns

### ZSDK Error Handling (PREFERRED)
```dart
// ✅ CORRECT - Use ZebraErrorBridge for all ZSDK operations
catch (e) {
  return ZebraErrorBridge.fromCommandError<String?>(
    e,
    command: 'getSetting($setting)',
    stackTrace: StackTrace.current,
  );
}

catch (e) {
  return ZebraErrorBridge.fromConnectionError<bool>(
    e,
    deviceAddress: address,
    stackTrace: StackTrace.current,
  );
}

// ❌ WRONG - Don't use generic Result.error for ZSDK operations
catch (e) {
  return Result.error('ZSDK operation failed: $e');
}
```

### Direct ErrorCode Usage (for non-ZSDK errors)
```dart
return Result.errorCode(ErrorCodes.connectionError);
return Result.errorCode(
  ErrorCodes.connectionTimeout,
  formatArgs: [timeoutSeconds],
  errorNumber: nativeErrorCode,
  nativeError: exception,
);
return Result.errorCode(
  ErrorCodes.printError,
  formatArgs: [errorMessage],
  dartStackTrace: stackTrace,
);
```

### Success Handling
```dart
return Result.success(data);
return Result.successCode(
  SuccessCodes.connectionSuccess,
  data: connectionInfo,
);
return Result.successCode(
  SuccessCodes.printRetrySuccess,
  formatArgs: [attempts],
  data: printJobId,
);
```

### Result Processing
```dart
final result = await operation();
if (result.success) {
  final data = result.data;
  final successInfo = result.successInfo;
  print('Success: ${successInfo?.message}');
} else {
  final error = result.error!;
  print('Error: ${error.message}');
  print('Code: ${error.code}');
  print('Category: ${error.originalErrorCode?.category}');
}
```

## Enforcement Rules

### ✅ REQUIRED
- **All error messages must use ErrorCodes constants**
- **All success messages must use SuccessCodes constants**
- **formatArgs must contain only variable values, not entire messages**
- **Message templates must use {0}, {1}, etc. placeholders**
- **All constants must be categorized and described**

### ❌ FORBIDDEN
- **Hardcoded error/success messages in code**
- **Passing entire message strings in formatArgs**
- **Defining error/success constants outside result.dart**
- **Using generic error messages without specific codes**

## Centralization Enforcement

### Files That MUST Use Centralized Constants
- `lib/smart_print_manager.dart` - Error handling and recovery
- `lib/zebra_printer.dart` - Connection and discovery errors
- `lib/zebra_printer_manager.dart` - Printer management errors
- `lib/zebra_printer_discovery.dart` - Discovery errors
- `lib/zebra_printer_readiness_manager.dart` - Readiness errors
- `mobile/src/lib/Services/ZebraPrinterPopupService.dart` - Mobile service errors
- `mobile/src/lib/Widgets/PrinterSelectionPopup/ZebraPrintingPopup.dart` - UI error handling

### Allowed String Literals
Only these string literals are allowed outside of [result.dart](mdc:lib/models/result.dart):
- **Logger prefixes**: `Logger.withPrefix('ClassName')`
- **Method channel names**: `MethodChannel('zebrautil')`
- **Method names**: `'startScan'`, `'connectToPrinter'`, etc.
- **Argument keys**: `'Address'`, `'Data'`, `'setting'`, etc.
- **Status values**: `'Connected'`, `'Disconnected'`, `'Found'`, etc.
- **UI labels**: `'Retry'`, `'Cancel'`, `'OK'`, etc.
- **Connection types**: `'WiFi'`, `'Bluetooth'`, `'USB'`, etc.

### Forbidden String Literals
These are NEVER allowed outside of [result.dart](mdc:lib/models/result.dart):
- **Error codes**: `'CONNECTION_ERROR'`, `'PRINT_ERROR'`, `'DISCOVERY_ERROR'`, etc.
- **Success codes**: `'CONNECTION_SUCCESS'`, `'PRINT_SUCCESS'`, etc.
- **Error categories**: `'Connection'`, `'Print'`, `'Discovery'`, etc.
- **Error descriptions**: Any error description strings

## Migration Requirements

### When Adding New Error/Success Codes
1. **ALWAYS** add to [result.dart](mdc:lib/models/result.dart) first
2. **NEVER** define error/success codes in other files
3. **ALWAYS** use the centralized constants in all other files

### When Refactoring Existing Code
1. **Find** all hardcoded error/success strings
2. **Replace** with appropriate `ErrorCodes` or `SuccessCodes` constants
3. **Verify** all references use centralized constants
4. **Test** to ensure functionality remains intact

## Testing Requirements

### Static Analysis
- **No hardcoded error/success strings** in any Dart files
- **All error/success codes** reference centralized constants
- **No duplicate error/success code definitions**

### Runtime Validation
- **Error codes** resolve to valid `ErrorCode` objects
- **Success codes** resolve to valid `SuccessCode` objects
- **Message formatting** works correctly with format args

### Error Code Testing
```dart
test('should return correct error code for connection timeout', () {
  final result = Result.errorCode(
    ErrorCodes.connectionTimeout,
    formatArgs: [30],
  );
  expect(result.error?.code, equals('CONNECTION_TIMEOUT'));
  expect(result.error?.message, equals('Connection timed out after 30 seconds'));
});
```

## Related Files
- [result.dart](mdc:lib/models/result.dart) - Centralized error and success code definitions
- [smart_print_manager.dart](mdc:lib/smart_print_manager.dart) - Error handling implementation
- [zebra_printer.dart](mdc:lib/zebra_printer.dart) - Connection error handling
- [zebra_printer_manager.dart](mdc:lib/zebra_printer_manager.dart) - Printer management errors
- [error-code-centralization.mdc](mdc:.cursor/rules/error-code-centralization.mdc) - Rule for error code centralization

## Last Updated
2024-12-19 - Merged result-based-architecture and error-code-centralization rules for unified enforcement

globs:
alwaysApply: false
---
