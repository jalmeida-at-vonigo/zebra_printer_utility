---
description: 
globs: 
alwaysApply: true
---
# Zebra Printer Flutter Plugin Development Guide

## Project Overview
This is a Flutter plugin for integrating Zebra printers on iOS and Android platforms. The plugin uses the Zebra Link-OS SDK (ZSDK) for native printer communication.

## Architecture Decisions

### iOS Implementation Strategy
**Use Objective-C wrapper for ZSDK integration. Period.**
- Swift cannot directly import the ZSDK framework due to module limitations
- Create minimal Objective-C wrappers that expose ZSDK functionality to Swift
- All business logic and thread management stays in Swift
- The wrapper should only bridge ZSDK APIs, no complex logic

### Key Files Structure

#### Flutter/Dart Side
- [lib/zebra_util.dart](mdc:lib/zebra_util.dart) - Main plugin entry point
- [lib/zebra_printer.dart](mdc:lib/zebra_printer.dart) - Printer instance management and operations
- [lib/zebra_device.dart](mdc:lib/zebra_device.dart) - Device model for discovered printers

#### iOS Side
- [ios/Classes/ZebrautilPlugin.swift](mdc:ios/Classes/ZebrautilPlugin.swift) - Main plugin registration
- [ios/Classes/ZebraPrinterInstance.swift](mdc:ios/Classes/ZebraPrinterInstance.swift) - Swift implementation of printer operations
- [ios/Classes/ZSDKWrapper.h](mdc:ios/Classes/ZSDKWrapper.h) - Objective-C wrapper header
- [ios/Classes/ZSDKWrapper.m](mdc:ios/Classes/ZSDKWrapper.m) - Objective-C wrapper implementation
- [ios/zebrautil.podspec](mdc:ios/zebrautil.podspec) - CocoaPods configuration

#### Android Side
- [android/src/main/java/com/rubdev/zebrautil/ZebraUtilPlugin.java](mdc:android/src/main/java/com/rubdev/zebrautil/ZebraUtilPlugin.java) - Main plugin
- [android/src/main/java/com/rubdev/zebrautil/Printer.java](mdc:android/src/main/java/com/rubdev/zebrautil/Printer.java) - Printer operations

## Method Channel Protocol

### Main Channel: `zebrautil`
- `getInstance` - Creates a new printer instance, returns instance ID

### Instance Channel: `ZebraPrinterObject{instanceId}`
Methods:
- `checkPermission` - Check Bluetooth/network permissions
- `startScan` - Start discovering printers
- `stopScan` - Stop discovery
- `connectToPrinter` - Connect to a printer by address
- `print` - Send data to printer
- `disconnect` - Disconnect from printer
- `isPrinterConnected` - Check connection status
- `setSettings` - Configure printer settings
- `getLocateValue` - Get localized strings

Events sent from native to Flutter:
- `printerFound` - New printer discovered
- `onDiscoveryError` - Discovery error occurred
- `onDiscoveryDone` - Discovery completed

## ZSDK Integration Guidelines

### iOS ZSDK Setup
1. The ZSDK framework is located at `ios/ZSDK_API.xcframework`
2. The podspec must include:
   ```ruby
   s.vendored_frameworks = 'ZSDK_API.xcframework'
   s.frameworks = 'ExternalAccessory', 'CoreBluetooth'
   s.libraries = 'z'
   ```
3. Use Objective-C wrapper to expose ZSDK APIs to Swift
4. Never try to import ZSDK headers directly in Swift

### Android ZSDK Setup
1. ZSDK JAR files are in `android/libs/`
2. Main SDK file: `ZSDK_ANDROID_API.jar`
3. Dependencies are configured in `android/build.gradle`

## Common Issues and Solutions

### iOS Build Issues
- **"No such module 'ZSDK_API'"** - Use Objective-C wrapper, don't import directly in Swift
- **"Could not build Objective-C module"** - Check that wrapper properly imports ZSDK headers
- **Framework not found** - Ensure podspec vendored_frameworks path is correct

### Threading
- All ZSDK operations must run on background threads
- Use DispatchQueue for iOS, AsyncTask/Executors for Android
- Always dispatch UI updates to main thread

## Code Style Guidelines

### Swift
- Use proper queue management for async operations
- Handle optionals safely
- Provide meaningful error messages

### Objective-C Wrapper
- Keep it minimal - only expose what's needed
- Use `id` return types to avoid exposing ZSDK types in headers
- Handle memory management with ARC

### Flutter/Dart
- Follow Flutter plugin best practices
- Use proper error handling with PlatformException
- Maintain consistent API across platforms

## Testing Approach
- Test discovery without physical printers using simulator/emulator
- Use dummy responses for initial development
- Real device testing required for actual printing
- Test both Bluetooth and network connections

## Important Notes
- The plugin must be self-sustaining - no manual Xcode configuration required
- Always clean and rebuild after podspec changes
- Run `pod install` in example/ios after any iOS configuration changes
- The ZSDK is a closed-source framework - work within its limitations
